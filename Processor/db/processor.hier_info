|processor
pc_clk <= clock_splitter:inst2.out_clk1
clk => clock_splitter:inst2.clk
clk => Clock1Hz:inst.clk
alu <= controller:inst12.alu
store <= controller:inst12.store
load <= controller:inst12.load
jump <= controller:inst12.jump
branch <= controller:inst12.branch
alu_code[0] <= decoder:inst11.alu_code[0]
alu_code[1] <= decoder:inst11.alu_code[1]
alu_code[2] <= decoder:inst11.alu_code[2]
op_code[0] <= controller:inst12.opCodeOut[0]
op_code[1] <= controller:inst12.opCodeOut[1]
op_code[2] <= controller:inst12.opCodeOut[2]
op_code[3] <= controller:inst12.opCodeOut[3]
output[0] <= sign_ext:inst14.output[0]
output[1] <= sign_ext:inst14.output[1]
output[2] <= sign_ext:inst14.output[2]
output[3] <= sign_ext:inst14.output[3]
output[4] <= sign_ext:inst14.output[4]
output[5] <= sign_ext:inst14.output[5]
output[6] <= sign_ext:inst14.output[6]
output[7] <= sign_ext:inst14.output[7]
rd[0] <= decoder:inst11.rd[0]
rd[1] <= decoder:inst11.rd[1]
rd[2] <= decoder:inst11.rd[2]
rs[0] <= decoder:inst11.rs[0]
rs[1] <= decoder:inst11.rs[1]
rs[2] <= decoder:inst11.rs[2]
rt[0] <= decoder:inst11.rt[0]
rt[1] <= decoder:inst11.rt[1]
rt[2] <= decoder:inst11.rt[2]


|processor|clock_splitter:inst2
clk => counter[1].CLK
clk => counter[0].CLK
clk => out_clk1~reg0.CLK
clk => out_clk2~reg0.CLK
out_clk1 <= out_clk1~reg0.DB_MAX_OUTPUT_PORT_TYPE
out_clk2 <= out_clk2~reg0.DB_MAX_OUTPUT_PORT_TYPE


|processor|controller:inst12
clk => ~NO_FANOUT~
opCode[0] => opCodeOut[0].DATAIN
opCode[0] => Equal0.IN0
opCode[0] => Equal1.IN3
opCode[0] => Equal2.IN0
opCode[0] => Equal3.IN2
opCode[0] => Equal4.IN0
opCode[0] => Equal5.IN2
opCode[0] => Equal6.IN0
opCode[0] => Equal7.IN1
opCode[0] => Equal8.IN0
opCode[0] => Equal9.IN2
opCode[0] => Equal10.IN0
opCode[0] => Equal11.IN1
opCode[1] => opCodeOut[1].DATAIN
opCode[1] => Equal0.IN1
opCode[1] => Equal1.IN0
opCode[1] => Equal2.IN3
opCode[1] => Equal3.IN3
opCode[1] => Equal4.IN1
opCode[1] => Equal5.IN0
opCode[1] => Equal6.IN2
opCode[1] => Equal7.IN2
opCode[1] => Equal8.IN1
opCode[1] => Equal9.IN0
opCode[1] => Equal10.IN2
opCode[1] => Equal11.IN2
opCode[2] => opCodeOut[2].DATAIN
opCode[2] => Equal0.IN2
opCode[2] => Equal1.IN1
opCode[2] => Equal2.IN1
opCode[2] => Equal3.IN0
opCode[2] => Equal4.IN3
opCode[2] => Equal5.IN3
opCode[2] => Equal6.IN3
opCode[2] => Equal7.IN3
opCode[2] => Equal8.IN2
opCode[2] => Equal9.IN1
opCode[2] => Equal10.IN1
opCode[2] => Equal11.IN0
opCode[3] => opCodeOut[3].DATAIN
opCode[3] => Equal0.IN3
opCode[3] => Equal1.IN2
opCode[3] => Equal2.IN2
opCode[3] => Equal3.IN1
opCode[3] => Equal4.IN2
opCode[3] => Equal5.IN1
opCode[3] => Equal6.IN1
opCode[3] => Equal7.IN0
opCode[3] => Equal8.IN3
opCode[3] => Equal9.IN3
opCode[3] => Equal10.IN3
opCode[3] => Equal11.IN3
opCodeOut[0] <= opCode[0].DB_MAX_OUTPUT_PORT_TYPE
opCodeOut[1] <= opCode[1].DB_MAX_OUTPUT_PORT_TYPE
opCodeOut[2] <= opCode[2].DB_MAX_OUTPUT_PORT_TYPE
opCodeOut[3] <= opCode[3].DB_MAX_OUTPUT_PORT_TYPE
alu <= process_0~3.DB_MAX_OUTPUT_PORT_TYPE
store <= store~3.DB_MAX_OUTPUT_PORT_TYPE
load <= load~2.DB_MAX_OUTPUT_PORT_TYPE
jump <= jump~0.DB_MAX_OUTPUT_PORT_TYPE
branch <= branch~1.DB_MAX_OUTPUT_PORT_TYPE


|processor|decoder:inst11
instruction[0] => imm[0].DATAIN
instruction[0] => alu_code[0].DATAIN
instruction[1] => imm[1].DATAIN
instruction[1] => alu_code[1].DATAIN
instruction[2] => imm[2].DATAIN
instruction[2] => alu_code[2].DATAIN
instruction[3] => imm[3].DATAIN
instruction[3] => rt[0].DATAIN
instruction[4] => imm[4].DATAIN
instruction[4] => rt[1].DATAIN
instruction[5] => imm[5].DATAIN
instruction[5] => rt[2].DATAIN
instruction[6] => rs[0].DATAIN
instruction[7] => rs[1].DATAIN
instruction[8] => rs[2].DATAIN
instruction[9] => rd[0].DATAIN
instruction[10] => rd[1].DATAIN
instruction[11] => rd[2].DATAIN
instruction[12] => op_code[0].DATAIN
instruction[13] => op_code[1].DATAIN
instruction[14] => op_code[2].DATAIN
instruction[15] => op_code[3].DATAIN
op_code[0] <= instruction[12].DB_MAX_OUTPUT_PORT_TYPE
op_code[1] <= instruction[13].DB_MAX_OUTPUT_PORT_TYPE
op_code[2] <= instruction[14].DB_MAX_OUTPUT_PORT_TYPE
op_code[3] <= instruction[15].DB_MAX_OUTPUT_PORT_TYPE
rd[0] <= instruction[9].DB_MAX_OUTPUT_PORT_TYPE
rd[1] <= instruction[10].DB_MAX_OUTPUT_PORT_TYPE
rd[2] <= instruction[11].DB_MAX_OUTPUT_PORT_TYPE
rs[0] <= instruction[6].DB_MAX_OUTPUT_PORT_TYPE
rs[1] <= instruction[7].DB_MAX_OUTPUT_PORT_TYPE
rs[2] <= instruction[8].DB_MAX_OUTPUT_PORT_TYPE
rt[0] <= instruction[3].DB_MAX_OUTPUT_PORT_TYPE
rt[1] <= instruction[4].DB_MAX_OUTPUT_PORT_TYPE
rt[2] <= instruction[5].DB_MAX_OUTPUT_PORT_TYPE
alu_code[0] <= instruction[0].DB_MAX_OUTPUT_PORT_TYPE
alu_code[1] <= instruction[1].DB_MAX_OUTPUT_PORT_TYPE
alu_code[2] <= instruction[2].DB_MAX_OUTPUT_PORT_TYPE
imm[0] <= instruction[0].DB_MAX_OUTPUT_PORT_TYPE
imm[1] <= instruction[1].DB_MAX_OUTPUT_PORT_TYPE
imm[2] <= instruction[2].DB_MAX_OUTPUT_PORT_TYPE
imm[3] <= instruction[3].DB_MAX_OUTPUT_PORT_TYPE
imm[4] <= instruction[4].DB_MAX_OUTPUT_PORT_TYPE
imm[5] <= instruction[5].DB_MAX_OUTPUT_PORT_TYPE


|processor|lpm_rom0:inst10
address[0] => lpm_rom:lpm_rom_component.address[0]
address[1] => lpm_rom:lpm_rom_component.address[1]
address[2] => lpm_rom:lpm_rom_component.address[2]
address[3] => lpm_rom:lpm_rom_component.address[3]
address[4] => lpm_rom:lpm_rom_component.address[4]
address[5] => lpm_rom:lpm_rom_component.address[5]
address[6] => lpm_rom:lpm_rom_component.address[6]
address[7] => lpm_rom:lpm_rom_component.address[7]
q[0] <= lpm_rom:lpm_rom_component.q[0]
q[1] <= lpm_rom:lpm_rom_component.q[1]
q[2] <= lpm_rom:lpm_rom_component.q[2]
q[3] <= lpm_rom:lpm_rom_component.q[3]
q[4] <= lpm_rom:lpm_rom_component.q[4]
q[5] <= lpm_rom:lpm_rom_component.q[5]
q[6] <= lpm_rom:lpm_rom_component.q[6]
q[7] <= lpm_rom:lpm_rom_component.q[7]
q[8] <= lpm_rom:lpm_rom_component.q[8]
q[9] <= lpm_rom:lpm_rom_component.q[9]
q[10] <= lpm_rom:lpm_rom_component.q[10]
q[11] <= lpm_rom:lpm_rom_component.q[11]
q[12] <= lpm_rom:lpm_rom_component.q[12]
q[13] <= lpm_rom:lpm_rom_component.q[13]
q[14] <= lpm_rom:lpm_rom_component.q[14]
q[15] <= lpm_rom:lpm_rom_component.q[15]


|processor|lpm_rom0:inst10|lpm_rom:lpm_rom_component
address[0] => altrom:srom.address[0]
address[1] => altrom:srom.address[1]
address[2] => altrom:srom.address[2]
address[3] => altrom:srom.address[3]
address[4] => altrom:srom.address[4]
address[5] => altrom:srom.address[5]
address[6] => altrom:srom.address[6]
address[7] => altrom:srom.address[7]
inclock => ~NO_FANOUT~
outclock => ~NO_FANOUT~
memenab => otri[15].OE
memenab => otri[14].OE
memenab => otri[13].OE
memenab => otri[12].OE
memenab => otri[11].OE
memenab => otri[10].OE
memenab => otri[9].OE
memenab => otri[8].OE
memenab => otri[7].OE
memenab => otri[6].OE
memenab => otri[5].OE
memenab => otri[4].OE
memenab => otri[3].OE
memenab => otri[2].OE
memenab => otri[1].OE
memenab => otri[0].OE
q[0] <= otri[0].DB_MAX_OUTPUT_PORT_TYPE
q[1] <= otri[1].DB_MAX_OUTPUT_PORT_TYPE
q[2] <= otri[2].DB_MAX_OUTPUT_PORT_TYPE
q[3] <= otri[3].DB_MAX_OUTPUT_PORT_TYPE
q[4] <= otri[4].DB_MAX_OUTPUT_PORT_TYPE
q[5] <= otri[5].DB_MAX_OUTPUT_PORT_TYPE
q[6] <= otri[6].DB_MAX_OUTPUT_PORT_TYPE
q[7] <= otri[7].DB_MAX_OUTPUT_PORT_TYPE
q[8] <= otri[8].DB_MAX_OUTPUT_PORT_TYPE
q[9] <= otri[9].DB_MAX_OUTPUT_PORT_TYPE
q[10] <= otri[10].DB_MAX_OUTPUT_PORT_TYPE
q[11] <= otri[11].DB_MAX_OUTPUT_PORT_TYPE
q[12] <= otri[12].DB_MAX_OUTPUT_PORT_TYPE
q[13] <= otri[13].DB_MAX_OUTPUT_PORT_TYPE
q[14] <= otri[14].DB_MAX_OUTPUT_PORT_TYPE
q[15] <= otri[15].DB_MAX_OUTPUT_PORT_TYPE


|processor|lpm_rom0:inst10|lpm_rom:lpm_rom_component|altrom:srom
address[0] => segment[0][15].WADDR
address[0] => segment[0][15].RADDR
address[0] => segment[0][14].WADDR
address[0] => segment[0][14].RADDR
address[0] => segment[0][13].WADDR
address[0] => segment[0][13].RADDR
address[0] => segment[0][12].WADDR
address[0] => segment[0][12].RADDR
address[0] => segment[0][11].WADDR
address[0] => segment[0][11].RADDR
address[0] => segment[0][10].WADDR
address[0] => segment[0][10].RADDR
address[0] => segment[0][9].WADDR
address[0] => segment[0][9].RADDR
address[0] => segment[0][8].WADDR
address[0] => segment[0][8].RADDR
address[0] => segment[0][7].WADDR
address[0] => segment[0][7].RADDR
address[0] => segment[0][6].WADDR
address[0] => segment[0][6].RADDR
address[0] => segment[0][5].WADDR
address[0] => segment[0][5].RADDR
address[0] => segment[0][4].WADDR
address[0] => segment[0][4].RADDR
address[0] => segment[0][3].WADDR
address[0] => segment[0][3].RADDR
address[0] => segment[0][2].WADDR
address[0] => segment[0][2].RADDR
address[0] => segment[0][1].WADDR
address[0] => segment[0][1].RADDR
address[0] => segment[0][0].WADDR
address[0] => segment[0][0].RADDR
address[1] => segment[0][15].WADDR1
address[1] => segment[0][15].RADDR1
address[1] => segment[0][14].WADDR1
address[1] => segment[0][14].RADDR1
address[1] => segment[0][13].WADDR1
address[1] => segment[0][13].RADDR1
address[1] => segment[0][12].WADDR1
address[1] => segment[0][12].RADDR1
address[1] => segment[0][11].WADDR1
address[1] => segment[0][11].RADDR1
address[1] => segment[0][10].WADDR1
address[1] => segment[0][10].RADDR1
address[1] => segment[0][9].WADDR1
address[1] => segment[0][9].RADDR1
address[1] => segment[0][8].WADDR1
address[1] => segment[0][8].RADDR1
address[1] => segment[0][7].WADDR1
address[1] => segment[0][7].RADDR1
address[1] => segment[0][6].WADDR1
address[1] => segment[0][6].RADDR1
address[1] => segment[0][5].WADDR1
address[1] => segment[0][5].RADDR1
address[1] => segment[0][4].WADDR1
address[1] => segment[0][4].RADDR1
address[1] => segment[0][3].WADDR1
address[1] => segment[0][3].RADDR1
address[1] => segment[0][2].WADDR1
address[1] => segment[0][2].RADDR1
address[1] => segment[0][1].WADDR1
address[1] => segment[0][1].RADDR1
address[1] => segment[0][0].WADDR1
address[1] => segment[0][0].RADDR1
address[2] => segment[0][15].WADDR2
address[2] => segment[0][15].RADDR2
address[2] => segment[0][14].WADDR2
address[2] => segment[0][14].RADDR2
address[2] => segment[0][13].WADDR2
address[2] => segment[0][13].RADDR2
address[2] => segment[0][12].WADDR2
address[2] => segment[0][12].RADDR2
address[2] => segment[0][11].WADDR2
address[2] => segment[0][11].RADDR2
address[2] => segment[0][10].WADDR2
address[2] => segment[0][10].RADDR2
address[2] => segment[0][9].WADDR2
address[2] => segment[0][9].RADDR2
address[2] => segment[0][8].WADDR2
address[2] => segment[0][8].RADDR2
address[2] => segment[0][7].WADDR2
address[2] => segment[0][7].RADDR2
address[2] => segment[0][6].WADDR2
address[2] => segment[0][6].RADDR2
address[2] => segment[0][5].WADDR2
address[2] => segment[0][5].RADDR2
address[2] => segment[0][4].WADDR2
address[2] => segment[0][4].RADDR2
address[2] => segment[0][3].WADDR2
address[2] => segment[0][3].RADDR2
address[2] => segment[0][2].WADDR2
address[2] => segment[0][2].RADDR2
address[2] => segment[0][1].WADDR2
address[2] => segment[0][1].RADDR2
address[2] => segment[0][0].WADDR2
address[2] => segment[0][0].RADDR2
address[3] => segment[0][15].WADDR3
address[3] => segment[0][15].RADDR3
address[3] => segment[0][14].WADDR3
address[3] => segment[0][14].RADDR3
address[3] => segment[0][13].WADDR3
address[3] => segment[0][13].RADDR3
address[3] => segment[0][12].WADDR3
address[3] => segment[0][12].RADDR3
address[3] => segment[0][11].WADDR3
address[3] => segment[0][11].RADDR3
address[3] => segment[0][10].WADDR3
address[3] => segment[0][10].RADDR3
address[3] => segment[0][9].WADDR3
address[3] => segment[0][9].RADDR3
address[3] => segment[0][8].WADDR3
address[3] => segment[0][8].RADDR3
address[3] => segment[0][7].WADDR3
address[3] => segment[0][7].RADDR3
address[3] => segment[0][6].WADDR3
address[3] => segment[0][6].RADDR3
address[3] => segment[0][5].WADDR3
address[3] => segment[0][5].RADDR3
address[3] => segment[0][4].WADDR3
address[3] => segment[0][4].RADDR3
address[3] => segment[0][3].WADDR3
address[3] => segment[0][3].RADDR3
address[3] => segment[0][2].WADDR3
address[3] => segment[0][2].RADDR3
address[3] => segment[0][1].WADDR3
address[3] => segment[0][1].RADDR3
address[3] => segment[0][0].WADDR3
address[3] => segment[0][0].RADDR3
address[4] => segment[0][15].WADDR4
address[4] => segment[0][15].RADDR4
address[4] => segment[0][14].WADDR4
address[4] => segment[0][14].RADDR4
address[4] => segment[0][13].WADDR4
address[4] => segment[0][13].RADDR4
address[4] => segment[0][12].WADDR4
address[4] => segment[0][12].RADDR4
address[4] => segment[0][11].WADDR4
address[4] => segment[0][11].RADDR4
address[4] => segment[0][10].WADDR4
address[4] => segment[0][10].RADDR4
address[4] => segment[0][9].WADDR4
address[4] => segment[0][9].RADDR4
address[4] => segment[0][8].WADDR4
address[4] => segment[0][8].RADDR4
address[4] => segment[0][7].WADDR4
address[4] => segment[0][7].RADDR4
address[4] => segment[0][6].WADDR4
address[4] => segment[0][6].RADDR4
address[4] => segment[0][5].WADDR4
address[4] => segment[0][5].RADDR4
address[4] => segment[0][4].WADDR4
address[4] => segment[0][4].RADDR4
address[4] => segment[0][3].WADDR4
address[4] => segment[0][3].RADDR4
address[4] => segment[0][2].WADDR4
address[4] => segment[0][2].RADDR4
address[4] => segment[0][1].WADDR4
address[4] => segment[0][1].RADDR4
address[4] => segment[0][0].WADDR4
address[4] => segment[0][0].RADDR4
address[5] => segment[0][15].WADDR5
address[5] => segment[0][15].RADDR5
address[5] => segment[0][14].WADDR5
address[5] => segment[0][14].RADDR5
address[5] => segment[0][13].WADDR5
address[5] => segment[0][13].RADDR5
address[5] => segment[0][12].WADDR5
address[5] => segment[0][12].RADDR5
address[5] => segment[0][11].WADDR5
address[5] => segment[0][11].RADDR5
address[5] => segment[0][10].WADDR5
address[5] => segment[0][10].RADDR5
address[5] => segment[0][9].WADDR5
address[5] => segment[0][9].RADDR5
address[5] => segment[0][8].WADDR5
address[5] => segment[0][8].RADDR5
address[5] => segment[0][7].WADDR5
address[5] => segment[0][7].RADDR5
address[5] => segment[0][6].WADDR5
address[5] => segment[0][6].RADDR5
address[5] => segment[0][5].WADDR5
address[5] => segment[0][5].RADDR5
address[5] => segment[0][4].WADDR5
address[5] => segment[0][4].RADDR5
address[5] => segment[0][3].WADDR5
address[5] => segment[0][3].RADDR5
address[5] => segment[0][2].WADDR5
address[5] => segment[0][2].RADDR5
address[5] => segment[0][1].WADDR5
address[5] => segment[0][1].RADDR5
address[5] => segment[0][0].WADDR5
address[5] => segment[0][0].RADDR5
address[6] => segment[0][15].WADDR6
address[6] => segment[0][15].RADDR6
address[6] => segment[0][14].WADDR6
address[6] => segment[0][14].RADDR6
address[6] => segment[0][13].WADDR6
address[6] => segment[0][13].RADDR6
address[6] => segment[0][12].WADDR6
address[6] => segment[0][12].RADDR6
address[6] => segment[0][11].WADDR6
address[6] => segment[0][11].RADDR6
address[6] => segment[0][10].WADDR6
address[6] => segment[0][10].RADDR6
address[6] => segment[0][9].WADDR6
address[6] => segment[0][9].RADDR6
address[6] => segment[0][8].WADDR6
address[6] => segment[0][8].RADDR6
address[6] => segment[0][7].WADDR6
address[6] => segment[0][7].RADDR6
address[6] => segment[0][6].WADDR6
address[6] => segment[0][6].RADDR6
address[6] => segment[0][5].WADDR6
address[6] => segment[0][5].RADDR6
address[6] => segment[0][4].WADDR6
address[6] => segment[0][4].RADDR6
address[6] => segment[0][3].WADDR6
address[6] => segment[0][3].RADDR6
address[6] => segment[0][2].WADDR6
address[6] => segment[0][2].RADDR6
address[6] => segment[0][1].WADDR6
address[6] => segment[0][1].RADDR6
address[6] => segment[0][0].WADDR6
address[6] => segment[0][0].RADDR6
address[7] => segment[0][15].WADDR7
address[7] => segment[0][15].RADDR7
address[7] => segment[0][14].WADDR7
address[7] => segment[0][14].RADDR7
address[7] => segment[0][13].WADDR7
address[7] => segment[0][13].RADDR7
address[7] => segment[0][12].WADDR7
address[7] => segment[0][12].RADDR7
address[7] => segment[0][11].WADDR7
address[7] => segment[0][11].RADDR7
address[7] => segment[0][10].WADDR7
address[7] => segment[0][10].RADDR7
address[7] => segment[0][9].WADDR7
address[7] => segment[0][9].RADDR7
address[7] => segment[0][8].WADDR7
address[7] => segment[0][8].RADDR7
address[7] => segment[0][7].WADDR7
address[7] => segment[0][7].RADDR7
address[7] => segment[0][6].WADDR7
address[7] => segment[0][6].RADDR7
address[7] => segment[0][5].WADDR7
address[7] => segment[0][5].RADDR7
address[7] => segment[0][4].WADDR7
address[7] => segment[0][4].RADDR7
address[7] => segment[0][3].WADDR7
address[7] => segment[0][3].RADDR7
address[7] => segment[0][2].WADDR7
address[7] => segment[0][2].RADDR7
address[7] => segment[0][1].WADDR7
address[7] => segment[0][1].RADDR7
address[7] => segment[0][0].WADDR7
address[7] => segment[0][0].RADDR7
clocki => ~NO_FANOUT~
clocko => ~NO_FANOUT~
q[0] <= segment[0][0].DATAOUT
q[1] <= segment[0][1].DATAOUT
q[2] <= segment[0][2].DATAOUT
q[3] <= segment[0][3].DATAOUT
q[4] <= segment[0][4].DATAOUT
q[5] <= segment[0][5].DATAOUT
q[6] <= segment[0][6].DATAOUT
q[7] <= segment[0][7].DATAOUT
q[8] <= segment[0][8].DATAOUT
q[9] <= segment[0][9].DATAOUT
q[10] <= segment[0][10].DATAOUT
q[11] <= segment[0][11].DATAOUT
q[12] <= segment[0][12].DATAOUT
q[13] <= segment[0][13].DATAOUT
q[14] <= segment[0][14].DATAOUT
q[15] <= segment[0][15].DATAOUT


|processor|PC:inst3
input[0] => pre_count[0].DATAIN
input[1] => pre_count[1].DATAIN
input[2] => pre_count[2].DATAIN
input[3] => pre_count[3].DATAIN
input[4] => pre_count[4].DATAIN
input[5] => pre_count[5].DATAIN
input[6] => pre_count[6].DATAIN
input[7] => pre_count[7].DATAIN
clk => pre_count[7].CLK
clk => pre_count[6].CLK
clk => pre_count[5].CLK
clk => pre_count[4].CLK
clk => pre_count[3].CLK
clk => pre_count[2].CLK
clk => pre_count[1].CLK
clk => pre_count[0].CLK
reset => pre_count[7].ACLR
reset => pre_count[6].ACLR
reset => pre_count[5].ACLR
reset => pre_count[4].ACLR
reset => pre_count[3].ACLR
reset => pre_count[2].ACLR
reset => pre_count[1].ACLR
reset => pre_count[0].ACLR
enable => pre_count[7].ENA
enable => pre_count[6].ENA
enable => pre_count[5].ENA
enable => pre_count[4].ENA
enable => pre_count[3].ENA
enable => pre_count[2].ENA
enable => pre_count[1].ENA
enable => pre_count[0].ENA
count[0] <= pre_count[0].DB_MAX_OUTPUT_PORT_TYPE
count[1] <= pre_count[1].DB_MAX_OUTPUT_PORT_TYPE
count[2] <= pre_count[2].DB_MAX_OUTPUT_PORT_TYPE
count[3] <= pre_count[3].DB_MAX_OUTPUT_PORT_TYPE
count[4] <= pre_count[4].DB_MAX_OUTPUT_PORT_TYPE
count[5] <= pre_count[5].DB_MAX_OUTPUT_PORT_TYPE
count[6] <= pre_count[6].DB_MAX_OUTPUT_PORT_TYPE
count[7] <= pre_count[7].DB_MAX_OUTPUT_PORT_TYPE


|processor|addOne:inst6
input[0] => Add0.IN16
input[1] => Add0.IN15
input[2] => Add0.IN14
input[3] => Add0.IN13
input[4] => Add0.IN12
input[5] => Add0.IN11
input[6] => Add0.IN10
input[7] => Add0.IN9
output[0] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
output[1] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
output[2] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
output[3] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
output[4] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
output[5] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
output[6] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
output[7] <= Add0.DB_MAX_OUTPUT_PORT_TYPE


|processor|sign_ext:inst14
input[0] => output[0].DATAIN
input[1] => output[1].DATAIN
input[2] => output[2].DATAIN
input[3] => output[3].DATAIN
input[4] => output[4].DATAIN
input[5] => output[5].DATAIN
input[5] => output[7].DATAIN
input[5] => output[6].DATAIN
output[0] <= input[0].DB_MAX_OUTPUT_PORT_TYPE
output[1] <= input[1].DB_MAX_OUTPUT_PORT_TYPE
output[2] <= input[2].DB_MAX_OUTPUT_PORT_TYPE
output[3] <= input[3].DB_MAX_OUTPUT_PORT_TYPE
output[4] <= input[4].DB_MAX_OUTPUT_PORT_TYPE
output[5] <= input[5].DB_MAX_OUTPUT_PORT_TYPE
output[6] <= input[5].DB_MAX_OUTPUT_PORT_TYPE
output[7] <= input[5].DB_MAX_OUTPUT_PORT_TYPE


|processor|Clock1Hz:inst
reset => cnt[13].ACLR
reset => cnt[12].ACLR
reset => cnt[11].ACLR
reset => cnt[10].ACLR
reset => cnt[9].ACLR
reset => cnt[8].ACLR
reset => cnt[7].ACLR
reset => cnt[6].ACLR
reset => cnt[5].ACLR
reset => cnt[4].ACLR
reset => cnt[3].ACLR
reset => cnt[2].ACLR
reset => cnt[1].ACLR
reset => cnt[0].ACLR
reset => clockTmp.ACLR
clk => cnt[13].CLK
clk => cnt[12].CLK
clk => cnt[11].CLK
clk => cnt[10].CLK
clk => cnt[9].CLK
clk => cnt[8].CLK
clk => cnt[7].CLK
clk => cnt[6].CLK
clk => cnt[5].CLK
clk => cnt[4].CLK
clk => cnt[3].CLK
clk => cnt[2].CLK
clk => cnt[1].CLK
clk => cnt[0].CLK
clk => clockTmp.CLK
clock <= clockTmp.DB_MAX_OUTPUT_PORT_TYPE


